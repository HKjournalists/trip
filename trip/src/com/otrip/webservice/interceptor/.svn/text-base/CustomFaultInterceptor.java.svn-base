package com.otrip.webservice.interceptor;

import javax.servlet.http.HttpServletRequest;

import org.apache.cxf.binding.soap.SoapFault;
import org.apache.cxf.binding.soap.SoapMessage;
import org.apache.cxf.binding.soap.interceptor.AbstractSoapInterceptor;
import org.apache.cxf.interceptor.Fault;
import org.apache.cxf.phase.Phase;

import com.otrip.webservice.util.WebServiceContext;
import com.otrip.webservice.util.WebServiceHelper;

/**
 * @see 输出客户端异常验证
 * @author zhongJc
 *
 */
public class CustomFaultInterceptor  extends AbstractSoapInterceptor {

	public CustomFaultInterceptor() {
		 super(Phase.MARSHAL);
	}

	@Override
	public void handleMessage(SoapMessage message) throws Fault {
		// TODO Auto-generated method stub
		final Fault fault = (Fault) message.getContent(Exception.class);
        // Only change the fault code if it was not generated by Cyclos
        if (!WebServiceHelper.isFromCyclos(fault)) {
            final Throwable exception = fault.getCause() == null ? fault : fault.getCause();
            final SoapFault soapFault = WebServiceHelper.fault(exception);
            fault.setDetail(null);
            fault.setFaultCode(soapFault.getFaultCode());
            fault.setMessage(message(exception));
        }
        // there are cases where this interceptor is invoked but the context wasn't initialized
        // (e.g.: there is a unmarshalling error when CXF is trying to convert the request parameters)
        //
        if (WebServiceContext.isInitialized()) {
            final HttpServletRequest request = WebServiceContext.getRequest();
            request.setAttribute("soapFault", fault);
        }
       // webServiceHelper.error(fault);
	}
	
	
	private String message(final Throwable exception) {
        if (exception == null) {
            return "null";
        } else if (exception instanceof Exception) {
            return message((Exception) exception);
        } else {
            return exception.getMessage();
        }
    }


}
